import {
	PokeApiPokemons,
	PokeApiPokemonsResults,
	PokeApiType,
	Pokemon,
} from '@/@types'
import { PokemonInfo } from '@/components/PokemonInfo'
import { Sidebar } from '@/components/Sidebar'
import { useAppContext } from '@/contexts/appContext'
import { api } from '@/services/api'
import styles from '@/styles/Home.module.css'
import Head from 'next/head'
import { useEffect } from 'react'

export default function Home({ pokemons }: { pokemons: Pokemon[] }) {
	const { setPokemons, setIsMobile, setColapsed, setLoading } = useAppContext()
	useEffect(() => {
		setPokemons(pokemons)
	}, [pokemons, setPokemons])
	useEffect(() => {
		function handleResize() {
			const a = window.innerWidth
			if (a < 760) {
				setIsMobile(true)
				setColapsed(true)
			} else {
				setIsMobile(false)
			}
		}
		handleResize()
	}, [])
	useEffect(() => {
		if (document.readyState !== 'complete') {
			setLoading(true)
		} else {
			setLoading(false)
		}
	})
	return (
		<>
			<Head>
				<title>Pok√©dex</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link
					rel="apple-touch-icon"
					sizes="180x180"
					href="/apple-touch-icon.png"
				/>
				<link
					rel="icon"
					type="image/png"
					sizes="32x32"
					href="/favicon-32x32.png"
				/>
				<link
					rel="icon"
					type="image/png"
					sizes="16x16"
					href="/favicon-16x16.png"
				/>
				<link rel="manifest" href="/site.webmanifest" />
				<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
				<meta name="msapplication-TileColor" content="#da532c" />
				<meta name="theme-color" content="#ffffff" />
			</Head>
			<main className={styles.main}>
				<Sidebar />
				<PokemonInfo />
			</main>
		</>
	)
}

export const getStaticProps = async () => {
	const { data: pokemons } = await api.get<PokeApiPokemons>(
		'/pokemon?limit=1008'
	)

	async function getPokemonData(pokemons: PokeApiPokemonsResults[]) {
		const types = Promise.all(
			pokemons.map(async (pokemon: PokeApiPokemonsResults) => {
				const { data } = await api.get(`/pokemon/${pokemon.name}`)
				const types = data.types.map((type: PokeApiType) => {
					return {
						slot: type.slot,
						name: type.type.name,
					}
				})
				return {
					name: data.name,
					id: data.id,
					types,
				}
			})
		)
		return types
	}
	const pokemonData = await getPokemonData(pokemons.results)

	return {
		props: {
			pokemons: pokemonData,
		},
	}
}
